
# ----------------------------------------------------------------------
# nvhpc xSDK container
# E3SM/ELM land model docker container
# AMD64 version
#
# ----------------------------------------------------------------------

FROM yuanfornl/elm_baseos_nvhpc:latest
LABEL maintainer.name="F.-M. Yuan" \
      maintainer.email="yuanf@ornl.gov" \
      author.name="Fengming Yuan" \
      author.email="yuanf@ornl.gov" \
      description="ELM container within Nvidia HPC xSDK based image loaded with necessary dependencies"

# python packages often used by ELM and data analysis
RUN cd / \
    && pip3 install --upgrade pip \
    && pip3 install matplotlib \
    && pip3 install pyproj
    
# where to get the ELM source code
ENV REPOSITORY_URL=https://github.com/fmyuan/elm_containers
ENV TOOLS_REPOSITORY_RAW_URL=https://raw.githubusercontent.com/FASSt-simulation/fasst_simulation_tools
ENV USER=modeluser

# Add new group, user, and user directory with user permissions
RUN groupadd -r dockerusers \
    && useradd -ms /bin/bash $USER -u 1001 -g dockerusers \
    && chown $USER:dockerusers /home/$USER

## create data mount point in container
## could change this to /mnt or something more generic in machines files
RUN cd / \
    && mkdir -p inputdata \
    && mkdir -p output \
    && mkdir -p scripts \
    && mkdir -p tools \
    && mkdir -p tools/cprnc \
    && mkdir -p baselines \
    && mkdir -p .cime \
    && mkdir -p home/$USER/.cime \
    && chown $USER inputdata \
    && chown $USER output \
    && chown $USER scripts \
    && chown $USER tools \
    && chown $USER tools/cprnc \
    && chown $USER baselines \
    && chown $USER .cime \
    && chown $USER /home/$USER/.cime \
    && cd /

## --------------------------------------------------------------------------------------------------------------------

## Checkout ELM model
RUN cd / \
    && git config --global https.postBuffer 1048576000 \
    && git -c http.sslVerify=false clone -b peterdschwartz/lnd/hires-io --depth 1 --single-branch  https://github.com/fmyuan/E3SM.git \
    && cd /E3SM \
    && git submodule init \
    && git submodule update -f --recursive

RUN cd /.cime \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/config \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/config_compilers.xml \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/config_machines.xml \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/gnu_docker.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidia.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidia_docker.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidiagpu_docker.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidiagpu.cmake \
    && cd /

RUN cd /home/$USER/.cime \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/config \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/config_compilers.xml \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/config_machines.xml \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/gnu_docker.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidia.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidia_docker.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidiagpu_docker.cmake \
    && wget $REPOSITORY_URL/raw/master/docker/elm/cime_config/nvidiagpu.cmake \
    && cd /

# Provide a symlink between ncap and ncap2 for OLMT 
# Switch to using modeluser for test build (so it can find the ~/.cime docker machine configuration files)
RUN ln -s /usr/bin/ncap2 /usr/bin/ncap \
    && chown $USER:dockerusers /E3SM \
    && chmod -R 777 /E3SM \
    && export USER=${USER}

# Set user
USER ${USER}

## --------------------------------------------------------------------------------------------------------------------

## Install OLMT tool into the container to use with site or ensemble simulations
# This uses a stable release of the Arctic-userpft branch of OLMT
RUN cd /tools \
    && git -c http.sslVerify=false clone -b Arctic-userpft --single-branch --depth 1 https://github.com/dmricciuto/OLMT.git \
    && chown $USER:dockerusers -R /tools/OLMT \
    && chmod -R 777 /tools/OLMT

# Copy scripts into /scripts to make availible to users
RUN cd /scripts \
    && cp /tools/OLMT/examples/download_elm_singlesite_forcing_data.sh ./ \
    && cp /tools/OLMT/examples/site_fullrun_userdata_docker.sh OLMT_docker_example.sh \
    && chown $USER:dockerusers download_elm_singlesite_forcing_data.sh \
    && chmod +x download_elm_singlesite_forcing_data.sh \
    && chown $USER:dockerusers OLMT_docker_example.sh \
    && chmod +x OLMT_docker_example.sh


## --------------------------------------------------------------------------------------------------------------------

## SPELL: Software-tools for Porting ELM with openacc in a function unit test framework

RUN cd /tools \
    && git -c http.sslVerify=false clone -b master --single-branch --depth 1 https://github.com/peterdschwartz/SPEL_OpenACC.git \
    && chown $USER:dockerusers -R /tools/SPEL_OpenACC \
    && chmod -R 777 /tools/SPEL_OpenACC


## --------------------------------------------------------------------------------------------------------------------

USER ${USER}
RUN export USER=${USER}
## END
